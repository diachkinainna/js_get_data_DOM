{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,I,EAAM,EAAS,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFM,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAEvB,GAAG,CAAC,SAAC,CAA7B,EACE,IAAM,EAAS,SAAS,EAAQ,WAAW,CAAC,OAAO,CAAC,KAAM,IAAK,IAE/D,IAAI,MAAM,GAIV,OAAO,CACT,GAEM,EAAQ,EAAO,MAAM,CAAC,SAAC,CAAA,CAAK,CAAlC,EAA4C,OAAA,EAAM,CAAO,EAAA,GACnD,EAAU,KAAK,KAAK,CAAC,EAAQ,EAAO,MAAM,EAC1C,EAAiB,EAAM,cAAc,CAAC,SACtC,EAAmB,EAAQ,cAAc,CAAC,QAIhD,CAFiB,SAAS,aAAa,CAAC,qBAE/B,WAAW,CAAG,EAIvB,AAFiB,SAAS,aAAa,CAAC,uBAE/B,WAAW,CAAG","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["'use strict';\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar elements = _to_consumable_array(document.querySelectorAll('.population'));\nvar values = elements.map(function(element) {\n    var number = parseInt(element.textContent.replace(/,/g, ''), 10);\n    if (isNaN(number)) return;\n    return number;\n});\nvar total = values.reduce(function(sum, value) {\n    return sum + value;\n}, 0);\nvar average = Math.round(total / values.length);\nvar totalFormatted = total.toLocaleString('en-US');\nvar averageFormatted = average.toLocaleString('en-US');\nvar element1 = document.querySelector('.total-population');\nelement1.textContent = totalFormatted;\nvar element2 = document.querySelector('.average-population');\nelement2.textContent = averageFormatted;\n\n//# sourceMappingURL=index.3dfd9ba7.js.map\n","'use strict';\n\nconst elements = [...document.querySelectorAll('.population')];\n\nconst values = elements.map((element) => {\n  const number = parseInt(element.textContent.replace(/,/g, ''), 10);\n\n  if (isNaN(number)) {\n    return;\n  }\n\n  return number;\n});\n\nconst total = values.reduce((sum, value) => sum + value, 0);\nconst average = Math.round(total / values.length);\nconst totalFormatted = total.toLocaleString('en-US');\nconst averageFormatted = average.toLocaleString('en-US');\n\nconst element1 = document.querySelector('.total-population');\n\nelement1.textContent = totalFormatted;\n\nconst element2 = document.querySelector('.average-population');\n\nelement2.textContent = averageFormatted;\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","values","elements","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","map","element","number","parseInt","textContent","replace","isNaN","total","reduce","sum","value","average","Math","round","totalFormatted","toLocaleString","averageFormatted","element1","querySelector","element2"],"version":3,"file":"index.3dfd9ba7.js.map"}